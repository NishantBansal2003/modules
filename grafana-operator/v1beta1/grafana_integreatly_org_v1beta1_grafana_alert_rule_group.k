"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1



schema GrafanaAlertRuleGroup:
    """
    GrafanaAlertRuleGroup is the Schema for the grafanaalertrulegroups API

    Attributes
    ----------
    apiVersion : str, default is "grafana.integreatly.org/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "GrafanaAlertRuleGroup", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpec, default is Undefined, optional
        spec
    status : GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupStatus, default is Undefined, optional
        status
    """


    apiVersion: "grafana.integreatly.org/v1beta1" = "grafana.integreatly.org/v1beta1"

    kind: "GrafanaAlertRuleGroup" = "GrafanaAlertRuleGroup"

    metadata?: v1.ObjectMeta

    spec?: GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpec

    status?: GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupStatus


schema GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpec:
    """
    GrafanaAlertRuleGroupSpec defines the desired state of GrafanaAlertRuleGroup

    Attributes
    ----------
    allowCrossNamespaceImport : bool, default is Undefined, optional
        allow cross namespace import
    folderRef : str, default is Undefined, optional
        Match GrafanaFolders CRs to infer the uid
    folderUID : str, default is Undefined, optional
        UID of the folder containing this rule group
        Overrides the FolderSelector
    instanceSelector : GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecInstanceSelector, default is Undefined, required
        instance selector
    interval : str, default is Undefined, required
        interval
    resyncPeriod : str, default is "10m", optional
        resync period
    rules : [GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0], default is Undefined, required
        rules
    """


    allowCrossNamespaceImport?: bool

    folderRef?: str

    folderUID?: str

    instanceSelector: GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecInstanceSelector

    interval: str

    resyncPeriod?: str = "10m"

    rules: [GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0]


schema GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecInstanceSelector:
    """
    selects Grafanas for import

    Attributes
    ----------
    matchExpressions : [GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecInstanceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecInstanceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecInstanceSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0:
    """
    AlertRule defines a specific rule to be evaluated. It is based on the upstream model with some k8s specific type mappings

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        annotations
    condition : str, default is Undefined, required
        condition
    data : [GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0DataItems0], default is Undefined, required
        data
    execErrState : str, default is Undefined, required
        exec err state
    $for : str, default is Undefined, required
        for
    isPaused : bool, default is Undefined, optional
        is paused
    labels : {str:str}, default is Undefined, optional
        labels
    noDataState : str, default is Undefined, required
        no data state
    notificationSettings : GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0NotificationSettings, default is Undefined, optional
        notification settings
    title : str, default is Undefined, required
        title
    uid : str, default is Undefined, required
        uid
    """


    annotations?: {str:str}

    condition: str

    data: [GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0DataItems0]

    execErrState: "OK" | "Alerting" | "Error" | "KeepLast"

    $for: str

    isPaused?: bool

    labels?: {str:str}

    noDataState: "Alerting" | "NoData" | "OK" | "KeepLast"

    notificationSettings?: GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0NotificationSettings

    title: str

    uid: str


    check:
        len(title) <= 190
        len(title) >= 1
        regex_match(str(uid), r"^[a-zA-Z0-9-_]+$")


schema GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0DataItems0:
    """
    grafana integreatly org v1beta1 grafana alert rule group spec rules items0 data items0

    Attributes
    ----------
    datasourceUid : str, default is Undefined, optional
        Grafana data source unique identifier; it should be '__expr__' for a Server Side Expression operation.
    model : any, default is Undefined, optional
        JSON is the raw JSON query and includes the above properties as well as custom properties.
    queryType : str, default is Undefined, optional
        QueryType is an optional identifier for the type of query.
        It can be used to distinguish different types of queries.
    refId : str, default is Undefined, optional
        RefID is the unique identifier of the query, set by the frontend call.
    relativeTimeRange : GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0DataItems0RelativeTimeRange, default is Undefined, optional
        relative time range
    """


    datasourceUid?: str

    model?: any

    queryType?: str

    refId?: str

    relativeTimeRange?: GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0DataItems0RelativeTimeRange


schema GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0DataItems0RelativeTimeRange:
    """
    relative time range

    Attributes
    ----------
    from : int, default is Undefined, optional
        from
    to : int, default is Undefined, optional
        to
    """


    from?: int

    to?: int


schema GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupSpecRulesItems0NotificationSettings:
    """
    grafana integreatly org v1beta1 grafana alert rule group spec rules items0 notification settings

    Attributes
    ----------
    group_by : [str], default is Undefined, optional
        group by
    group_interval : str, default is Undefined, optional
        group interval
    group_wait : str, default is Undefined, optional
        group wait
    mute_time_intervals : [str], default is Undefined, optional
        mute time intervals
    receiver : str, default is Undefined, required
        receiver
    repeat_interval : str, default is Undefined, optional
        repeat interval
    """


    group_by?: [str]

    group_interval?: str

    group_wait?: str

    mute_time_intervals?: [str]

    receiver: str

    repeat_interval?: str


schema GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupStatus:
    """
    GrafanaAlertRuleGroupStatus defines the observed state of GrafanaAlertRuleGroup

    Attributes
    ----------
    conditions : [GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupStatusConditionsItems0], default is Undefined, required
        conditions
    """


    conditions: [GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupStatusConditionsItems0]


schema GrafanaIntegreatlyOrgV1beta1GrafanaAlertRuleGroupStatusConditionsItems0:
    """
    Condition contains details for one aspect of the current state of this API Resource.
    ---
    This struct is intended for direct use as an array at the field path .status.conditions.  For example,


    	type FooStatus struct{
    	    // Represents the observations of a foo's current state.
    	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
    	    // +patchMergeKey=type
    	    // +patchStrategy=merge
    	    // +listType=map
    	    // +listMapKey=type
    	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`


    	    // other fields
    	}

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another.
        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition.
        This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition.
        Producers of specific condition types may define expected values and meanings for this field,
        and whether the values are considered a guaranteed API.
        The value should be a CamelCase string.
        This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase.
        ---
        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
        useful (see .node.status.conditions), the ability to deconflict is important.
        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0
        len(reason) <= 1024
        len(reason) >= 1
        regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


